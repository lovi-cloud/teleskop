syntax = "proto3";

package agent;
option  go_package = ".;agent";

service Agent {
  rpc GetISCSIQualifiedName(GetISCSIQualifiedNameRequest)
      returns (GetISCSIQualifiedNameResponse) {}
  rpc GetIPTables(GetIPTablesRequest) returns (GetIPTablesResponse) {}

  rpc SetupDefaultSecurityGroup(SetupDefaultSecurityGroupRequest)
      returns (SetupDefaultSecurityGroupResponse) {}
  rpc AddSecurityGroup(AddSecurityGroupRequest)
      returns (AddSecurityGroupResponse) {}

  rpc AddBridge(AddBridgeRequest) returns (AddBridgeResponse) {}
  rpc AddVLANInterface(AddVLANInterfaceRequest)
      returns (AddVLANInterfaceResponse) {}
  rpc AddInterfaceToBridge(AddInterfaceToBridgeRequest)
      returns (AddInterfaceToBridgeResponse) {}
  rpc AddVirtualMachine(AddVirtualMachineRequest)
      returns (AddVirtualMachineResponse) {}
  rpc ConnectBlockDevice(ConnectBlockDeviceRequest)
      returns (ConnectBlockDeviceResponse) {}

  rpc GetVirtualMachine(GetVirtualMachineRequest)
      returns (GetVirtualMachineResponse) {}
  rpc ListVirtualMachine(ListVirtualMachineRequest)
      returns (ListVirtualMachineResponse) {}
  rpc StartVirtualMachine(StartVirtualMachineRequest)
      returns (StartVirtualMachineResponse) {}
  rpc AttachBlockDevice(AttachBlockDeviceRequest)
      returns (AttachBlockDeviceResponse) {}
  rpc AttachInterface(AttachInterfaceRequest)
      returns (AttachInterfaceResponse) {}

  rpc DeleteBridge(DeleteBridgeRequest) returns (DeleteBridgeResponse) {}
  rpc DeleteVLANInterface(DeleteVLANInterfaceRequest)
      returns (DeleteVLANInterfaceResponse) {}
  rpc DeleteInterfaceFromBridge(DeleteInterfaceFromBridgeRequest)
      returns (DeleteInterfaceFromBridgeResponse) {}
  rpc DeleteVirtualMachine(DeleteVirtualMachineRequest)
      returns (DeleteVirtualMachineResponse) {}
  rpc DisconnectBlockDevice(DisconnectBlockDeviceRequest)
      returns (DisconnectBlockDeviceResponse) {}

  rpc StopVirtualMachine(StopVirtualMachineRequest)
      returns (StopVirtualMachineResponse) {}
  rpc DetachBlockDevice(DetachBlockDeviceRequest)
      returns (DetachBlockDeviceResponse) {}
  rpc DetachInterface(DetachInterfaceRequest)
      returns (DetachInterfaceResponse) {}
}

message VirtualMachine {
  string uuid = 1;
  string name = 2;
  enum State {
    NO_STATE     = 0;
    RUNNING      = 1;
    BLOCKED      = 2;
    PAUSED       = 3;
    SHUTDOWN     = 4;
    SHUTOFF      = 5;
    CRASHED      = 6;
    PM_SUSPENDED = 7;
  }
  State state = 3;
}

message GetISCSIQualifiedNameRequest {}

message GetIPTablesRequest {}

message SetupDefaultSecurityGroupRequest {}

message AddSecurityGroupRequest {
  string interface   = 1;
  string ip_address  = 2;
  string mac_address = 3;
}

message AddBridgeRequest {
  string name          = 1;
  string metadata_cidr = 2;
  bool   internal_only = 3;
}

message AddVLANInterfaceRequest {
  uint32 vlan_id          = 1;
  string parent_interface = 2;
}

message AddInterfaceToBridgeRequest {
  string bridge    = 1;
  string interface = 2;
}

message AddVirtualMachineRequest {
  string name        = 1;
  uint32 vcpus       = 2;
  uint64 memory_kib  = 3;
  string boot_device = 4;
}

message ConnectBlockDeviceRequest {
  repeated string portal_addresses = 1;
  uint32          host_lun_id      = 2;
}

message AttachBlockDeviceRequest {
  string uuid          = 1;
  string source_device = 2;
  string target_device = 3;
}

message AttachInterfaceRequest {
  string uuid             = 1;
  string bridge           = 2;
  uint32 inbound_average  = 3;
  uint32 outbound_average = 4;
  string name             = 5;
  string mac_address      = 6;
}

message StartVirtualMachineRequest {
  string uuid = 1;
}

message GetVirtualMachineRequest {
  string uuid = 1;
}

message ListVirtualMachineRequest {}

message DeleteBridgeRequest {
  string name = 1;
}

message DeleteVLANInterfaceRequest {
  uint32 vlan_id          = 1;
  string parent_interface = 2;
}

message DeleteInterfaceFromBridgeRequest {
  string bridge    = 1;
  string interface = 2;
}

message DeleteVirtualMachineRequest {
  string uuid = 1;
}

message DisconnectBlockDeviceRequest {
  repeated string portal_addresses = 1;
  uint32          host_lun_id      = 2;
}

message StopVirtualMachineRequest {
  string uuid = 1;
}

message DetachBlockDeviceRequest {
  string uuid          = 1;
  string source_device = 2;
  string target_device = 3;
}

message DetachInterfaceRequest {
  string uuid             = 1;
  string bridge           = 2;
  uint32 inbound_average  = 3;
  uint32 outbound_average = 4;
  string name             = 5;
  string mac_address      = 6;
}

// response
message GetISCSIQualifiedNameResponse {
  string iqn = 1;
}

message GetIPTablesResponse {}

message SetupDefaultSecurityGroupResponse {}

message AddSecurityGroupResponse {}

message AddBridgeResponse {}

message AddVLANInterfaceResponse {}

message AddInterfaceToBridgeResponse {}

message AddVirtualMachineResponse {
  string uuid = 1;
  string name = 2;
}

message ConnectBlockDeviceResponse {
  string device_name = 1;
}

message StartVirtualMachineResponse {
  string uuid = 1;
  string name = 2;
}

message GetVirtualMachineResponse {
  VirtualMachine virtual_machine = 1;
}

message ListVirtualMachineResponse {
  repeated VirtualMachine virtual_machines = 1;
}

message AttachBlockDeviceResponse {
  string uuid = 1;
  string name = 2;
}

message AttachInterfaceResponse {
  string uuid = 1;
  string name = 2;
}

message DeleteBridgeResponse {}

message DeleteVLANInterfaceResponse {}

message DeleteInterfaceFromBridgeResponse {}

message DeleteVirtualMachineResponse {}

message DisconnectBlockDeviceResponse {}

message StopVirtualMachineResponse {}

message DetachBlockDeviceResponse {}

message DetachInterfaceResponse {}
